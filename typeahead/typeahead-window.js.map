{"version":3,"file":"typeahead-window.js","sourceRoot":"","sources":["../../src/typeahead/typeahead-window.ts"],"names":[],"mappings":"OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAsB,MAAM,eAAe;OAElF,EAAC,QAAQ,EAAC,MAAM,cAAc;AAkBrC;IAAA;QACE,cAAS,GAAG,CAAC,CAAC;QAEd;;WAEG;QACF,eAAU,GAAG,IAAI,CAAC;QAYnB;;;WAGG;QACF,cAAS,GAAG,QAAQ,CAAC;QAOtB;;WAEG;QACF,gBAAW,GAAG,IAAI,YAAY,EAAE,CAAC;IA0DpC,CAAC;IAxDC,sCAAS,GAAT,cAAc,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAEpD,uCAAU,GAAV,UAAW,SAAiB,IAAI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC;IAE7D,iCAAI,GAAJ;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC/C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACrF,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,SAAS,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAED,iCAAI,GAAJ;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;QAC3C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAClE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,SAAS,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAED,mCAAM,GAAN,UAAO,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAE7C,qCAAQ,GAAR,cAAa,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,6BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,sBAAsB;oBAChC,QAAQ,EAAE,oBAAoB;oBAC9B,IAAI,EAAE,EAAC,OAAO,EAAE,eAAe,EAAE,OAAO,EAAE,gBAAgB,EAAC;oBAC3D,QAAQ,EAAE,+nBAYT;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,iCAAc,GAA6D,EACjF,CAAC;IACK,iCAAc,GAA2C;QAChE,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAChC,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC7B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC/B,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACpC,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAG,EAAE,EAAE;KACrD,CAAC;IACF,yBAAC;AAAD,CAAC,AA1FD,IA0FC","sourcesContent":["import {Component, Input, Output, EventEmitter, TemplateRef, OnInit} from '@angular/core';\r\n\r\nimport {toString} from '../util/util';\r\n\r\n/**\r\n * Context for the typeahead result template in case you want to override the default one\r\n */\r\nexport interface ResultTemplateContext {\r\n  /**\r\n   * Your typeahead result data model\r\n   */\r\n  result: any;\r\n\r\n  /**\r\n   * Search term from the input used to get current result\r\n   */\r\n  term: string;\r\n}\r\n\r\n\r\nexport class NgbTypeaheadWindow implements OnInit {\r\n  activeIdx = 0;\r\n\r\n  /**\r\n   * Flag indicating if the first row should be active initially\r\n   */\r\n   focusFirst = true;\r\n\r\n  /**\r\n   * Typeahead match results to be displayed\r\n   */\r\n   results;\r\n\r\n  /**\r\n   * Search term used to get current results\r\n   */\r\n   term: string;\r\n\r\n  /**\r\n   * A function used to format a given result before display. This function should return a formatted string without any\r\n   * HTML markup\r\n   */\r\n   formatter = toString;\r\n\r\n  /**\r\n   * A template to override a matching result default display\r\n   */\r\n   resultTemplate: TemplateRef<ResultTemplateContext>;\r\n\r\n  /**\r\n   * Event raised when user selects a particular result row\r\n   */\r\n   selectEvent = new EventEmitter();\r\n\r\n  getActive() { return this.results[this.activeIdx]; }\r\n\r\n  markActive(activeIdx: number) { this.activeIdx = activeIdx; }\r\n\r\n  next() {\r\n    if (this.activeIdx === this.results.length - 1) {\r\n      this.activeIdx = this.focusFirst ? (this.activeIdx + 1) % this.results.length : -1;\r\n    } else {\r\n      this.activeIdx++;\r\n    }\r\n  }\r\n\r\n  prev() {\r\n    if (this.activeIdx < 0) {\r\n      this.activeIdx = this.results.length - 1;\r\n    } else if (this.activeIdx === 0) {\r\n      this.activeIdx = this.focusFirst ? this.results.length - 1 : -1;\r\n    } else {\r\n      this.activeIdx--;\r\n    }\r\n  }\r\n\r\n  select(item) { this.selectEvent.emit(item); }\r\n\r\n  ngOnInit() { this.activeIdx = this.focusFirst ? 0 : -1; }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'ngb-typeahead-window',\r\n  exportAs: 'ngbTypeaheadWindow',\r\n  host: {'class': 'dropdown-menu', 'style': 'display: block'},\r\n  template: `\r\n    <template #rt let-result=\"result\" let-term=\"term\" let-formatter=\"formatter\">\r\n      <ngb-highlight [result]=\"formatter(result)\" [term]=\"term\"></ngb-highlight>\r\n    </template>\r\n    <template ngFor [ngForOf]=\"results\" let-result let-idx=\"index\">\r\n      <button type=\"button\" class=\"dropdown-item\" [class.active]=\"idx === activeIdx\" \r\n        (mouseenter)=\"markActive(idx)\" \r\n        (click)=\"select(result)\">\r\n          <template [ngTemplateOutlet]=\"resultTemplate || rt\" \r\n          [ngOutletContext]=\"{result: result, term: term, formatter: formatter}\"></template>\r\n      </button>\r\n    </template>\r\n  `\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'focusFirst': [{ type: Input },],\n'results': [{ type: Input },],\n'term': [{ type: Input },],\n'formatter': [{ type: Input },],\n'resultTemplate': [{ type: Input },],\n'selectEvent': [{ type: Output, args: ['select', ] },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}