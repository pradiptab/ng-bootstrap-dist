{"version":3,"file":"highlight.js","sourceRoot":"","sources":["../../src/typeahead/highlight.ts"],"names":[],"mappings":"OAAO,EAAC,SAAS,EAAE,KAAK,EAAa,uBAAuB,EAAgB,MAAM,eAAe;OAC1F,EAAC,YAAY,EAAE,QAAQ,EAAC,MAAM,cAAc;AAGnD;IAAA;QAGG,mBAAc,GAAG,eAAe,CAAC;IA0CpC,CAAC;IAtCC,kCAAW,GAAX,UAAY,OAAsB;QAChC,IAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,IAAM,QAAQ,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;QACzC,IAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QACjD,IAAI,UAAU,GAAG,CAAC,CAAC;QAEnB,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,MAAI,YAAY,CAAC,MAAM,CAAC,MAAG,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,IAAI;gBAC5E,IAAM,YAAY,GAAG,SAAS,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC/D,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC;gBAC1B,MAAM,CAAC,YAAY,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC;IACI,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,eAAe;oBACzB,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,QAAQ,EAAE,iEAA6D;wBACnE,mHAA6G;wBAC7G,aAAa;oBACjB,MAAM,EAAE,CAAC,6DAIR,CAAC;iBACH,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,2BAAc,GAA6D,EACjF,CAAC;IACK,2BAAc,GAA2C;QAChE,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACpC,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC5B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KACzB,CAAC;IACF,mBAAC;AAAD,CAAC,AA7CD,IA6CC","sourcesContent":["import {Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges} from '@angular/core';\r\nimport {regExpEscape, toString} from '../util/util';\r\n\r\n\r\nexport class NgbHighlight implements OnChanges {\r\n  parts: string[];\r\n\r\n   highlightClass = 'ngb-highlight';\r\n   result: string;\r\n   term: string;\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const resultStr = toString(this.result);\r\n    const resultLC = resultStr.toLowerCase();\r\n    const termLC = toString(this.term).toLowerCase();\r\n    let currentIdx = 0;\r\n\r\n    if (termLC.length > 0) {\r\n      this.parts = resultLC.split(new RegExp(`(${regExpEscape(termLC)})`)).map((part) => {\r\n        const originalPart = resultStr.substr(currentIdx, part.length);\r\n        currentIdx += part.length;\r\n        return originalPart;\r\n      });\r\n    } else {\r\n      this.parts = [resultStr];\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'ngb-highlight',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  template: `<template ngFor [ngForOf]=\"parts\" let-part let-isOdd=\"odd\">` +\r\n      `<span *ngIf=\"isOdd\" class=\"{{highlightClass}}\">{{part}}</span><template [ngIf]=\"!isOdd\">{{part}}</template>` +\r\n      `</template>`,  // template needs to be formatted in a certain way so we don't add empty text nodes\r\n  styles: [`\r\n    .ngb-highlight {\r\n      font-weight: bold;\r\n    }\r\n  `]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'highlightClass': [{ type: Input },],\n'result': [{ type: Input },],\n'term': [{ type: Input },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}