{"version":3,"file":"timepicker.js","sourceRoot":"","sources":["../../src/timepicker/timepicker.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, Input, forwardRef, OnChanges, SimpleChanges} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\n\r\nimport {isNumber, padNumber, toInteger, isDefined} from '../util/util';\r\nimport {NgbTime} from './ngb-time';\r\nimport {NgbTimepickerConfig} from './timepicker-config';\r\n\r\nconst NGB_TIMEPICKER_VALUE_ACCESSOR = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => NgbTimepicker),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * A lightweight & configurable timepicker directive.\r\n */\r\n\r\nexport class NgbTimepicker implements ControlValueAccessor,\r\n    OnChanges {\r\n  disabled: boolean;\r\n  model: NgbTime;\r\n\r\n  /**\r\n   * Whether to display 12H or 24H mode.\r\n   */\r\n   meridian: boolean;\r\n\r\n  /**\r\n   * Whether to display the spinners above and below the inputs.\r\n   */\r\n   spinners: boolean;\r\n\r\n  /**\r\n   * Whether to display seconds input.\r\n   */\r\n   seconds: boolean;\r\n\r\n  /**\r\n   * Number of hours to increase or decrease when using a button.\r\n   */\r\n   hourStep: number;\r\n\r\n  /**\r\n   * Number of minutes to increase or decrease when using a button.\r\n   */\r\n   minuteStep: number;\r\n\r\n  /**\r\n   * Number of seconds to increase or decrease when using a button.\r\n   */\r\n   secondStep: number;\r\n\r\n  /**\r\n   * To make timepicker readonly\r\n   */\r\n   readonlyInputs: boolean;\r\n\r\n  constructor(config: NgbTimepickerConfig) {\r\n    this.meridian = config.meridian;\r\n    this.spinners = config.spinners;\r\n    this.seconds = config.seconds;\r\n    this.hourStep = config.hourStep;\r\n    this.minuteStep = config.minuteStep;\r\n    this.secondStep = config.secondStep;\r\n    this.disabled = config.disabled;\r\n    this.readonlyInputs = config.readonlyInputs;\r\n  }\r\n\r\n  onChange = (_: any) => {};\r\n  onTouched = () => {};\r\n\r\n  writeValue(value) {\r\n    this.model = value ? new NgbTime(value.hour, value.minute, value.second) : new NgbTime();\r\n    if (!this.seconds && (!value || !isNumber(value.second))) {\r\n      this.model.second = 0;\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => any): void { this.onChange = fn; }\r\n\r\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\r\n\r\n  setDisabledState(isDisabled: boolean) { this.disabled = isDisabled; }\r\n\r\n  changeHour(step: number) {\r\n    this.model.changeHour(step);\r\n    this.propagateModelChange();\r\n  }\r\n\r\n  changeMinute(step: number) {\r\n    this.model.changeMinute(step);\r\n    this.propagateModelChange();\r\n  }\r\n\r\n  changeSecond(step: number) {\r\n    this.model.changeSecond(step);\r\n    this.propagateModelChange();\r\n  }\r\n\r\n  updateHour(newVal: string) {\r\n    this.model.updateHour(toInteger(newVal));\r\n    this.propagateModelChange();\r\n  }\r\n\r\n  updateMinute(newVal: string) {\r\n    this.model.updateMinute(toInteger(newVal));\r\n    this.propagateModelChange();\r\n  }\r\n\r\n  updateSecond(newVal: string) {\r\n    this.model.updateSecond(toInteger(newVal));\r\n    this.propagateModelChange();\r\n  }\r\n\r\n  toggleMeridian() {\r\n    if (this.meridian) {\r\n      this.changeHour(12);\r\n    }\r\n  }\r\n\r\n  formatHour(value: number) {\r\n    if (isNumber(value)) {\r\n      if (this.meridian) {\r\n        return padNumber(value % 12 === 0 ? 12 : value % 12);\r\n      } else {\r\n        return padNumber(value % 24);\r\n      }\r\n    } else {\r\n      return padNumber(NaN);\r\n    }\r\n  }\r\n\r\n  formatMinSec(value: number) { return padNumber(value); }\r\n\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['seconds'] && !this.seconds && this.model && !isNumber(this.model.second)) {\r\n      this.model.second = 0;\r\n      this.propagateModelChange(false);\r\n    }\r\n  }\r\n\r\n  private propagateModelChange(touched = true) {\r\n    if (touched) {\r\n      this.onTouched();\r\n    }\r\n    if (this.model.isValid(this.seconds)) {\r\n      this.onChange({hour: this.model.hour, minute: this.model.minute, second: this.model.second});\r\n    } else {\r\n      this.onChange(null);\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'ngb-timepicker',\r\n  styles: [`\r\n    .chevron::before {\r\n      border-style: solid;\r\n      border-width: 0.29em 0.29em 0 0;\r\n      content: '';\r\n      display: inline-block;\r\n      height: 0.69em;\r\n      left: 0.05em;\r\n      position: relative;\r\n      top: 0.15em;\r\n      transform: rotate(-45deg);\r\n      -webkit-transform: rotate(-45deg);\r\n      -ms-transform: rotate(-45deg);\r\n      vertical-align: middle;\r\n      width: 0.71em;\r\n    }\r\n    \r\n    .chevron.bottom:before {\r\n      top: -.3em;\r\n      -webkit-transform: rotate(135deg);\r\n      -ms-transform: rotate(135deg);\r\n      transform: rotate(135deg);\r\n    }\r\n    \r\n    .btn-link {\r\n      outline: 0;\r\n    }\r\n\r\n    .btn-link.disabled {\r\n      cursor: not-allowed;\r\n      opacity: .65;\r\n    }\r\n  `],\r\n  template: `\r\n     <fieldset [disabled]=\"disabled\" [class.disabled]=\"disabled\">\r\n      <table>\r\n        <tr *ngIf=\"spinners\">\r\n          <td class=\"text-xs-center\">\r\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeHour(hourStep)\"\r\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\r\n              <span class=\"chevron\"></span>\r\n            </button>\r\n          </td>\r\n          <td>&nbsp;</td>\r\n          <td class=\"text-xs-center\">\r\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeMinute(minuteStep)\"\r\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\r\n                <span class=\"chevron\"></span>\r\n            </button>\r\n          </td>\r\n          <template [ngIf]=\"seconds\">\r\n            <td>&nbsp;</td>\r\n            <td class=\"text-xs-center\">\r\n              <button type=\"button\" class=\"btn-link\" (click)=\"changeSecond(secondStep)\"\r\n                [disabled]=\"disabled\" [class.disabled]=\"disabled\">\r\n                <span class=\"chevron\"></span>\r\n              </button>\r\n            </td>\r\n          </template>\r\n          <template [ngIf]=\"meridian\">\r\n            <td>&nbsp;</td>\r\n            <td>&nbsp;</td>\r\n          </template>\r\n        </tr>\r\n        <tr>\r\n          <td>\r\n            <input type=\"text\" class=\"form-control\" maxlength=\"2\" size=\"2\" placeholder=\"HH\"\r\n              [value]=\"formatHour(model?.hour)\" (change)=\"updateHour($event.target.value)\" \r\n              [readonly]=\"readonlyInputs\" [disabled]=\"disabled\">\r\n          </td>\r\n          <td>&nbsp;:&nbsp;</td>\r\n          <td>\r\n            <input type=\"text\" class=\"form-control\" maxlength=\"2\" size=\"2\" placeholder=\"MM\"\r\n              [value]=\"formatMinSec(model?.minute)\" (change)=\"updateMinute($event.target.value)\" \r\n              [readonly]=\"readonlyInputs\" [disabled]=\"disabled\">\r\n          </td>\r\n          <template [ngIf]=\"seconds\">\r\n            <td>&nbsp;:&nbsp;</td>\r\n            <input type=\"text\" class=\"form-control\" maxlength=\"2\" size=\"2\" placeholder=\"SS\"\r\n              [value]=\"formatMinSec(model?.second)\" (change)=\"updateSecond($event.target.value)\" \r\n              [readonly]=\"readonlyInputs\" [disabled]=\"disabled\">\r\n          </template>\r\n          <template [ngIf]=\"meridian\">\r\n            <td>&nbsp;&nbsp;</td>\r\n            <td>\r\n              <button type=\"button\" class=\"btn btn-outline-primary\" (click)=\"toggleMeridian()\">{{model.hour >= 12 ? 'PM' : 'AM'}}</button>\r\n            </td>\r\n          </template>\r\n        </tr>\r\n        <tr *ngIf=\"spinners\">\r\n          <td class=\"text-xs-center\">\r\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeHour(-hourStep)\" \r\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\r\n              <span class=\"chevron bottom\"></span>\r\n            </button>\r\n          </td>\r\n          <td>&nbsp;</td>\r\n          <td class=\"text-xs-center\">\r\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeMinute(-minuteStep)\"\r\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\r\n              <span class=\"chevron bottom\"></span>\r\n            </button>\r\n          </td>\r\n          <template [ngIf]=\"seconds\">\r\n            <td>&nbsp;</td>\r\n            <td class=\"text-xs-center\">\r\n              <button type=\"button\" class=\"btn-link\" (click)=\"changeSecond(-secondStep)\"\r\n                [disabled]=\"disabled\" [class.disabled]=\"disabled\">\r\n                <span class=\"chevron bottom\"></span>\r\n              </button>\r\n            </td>\r\n          </template>\r\n          <template [ngIf]=\"meridian\">\r\n            <td>&nbsp;</td>\r\n            <td>&nbsp;</td>\r\n          </template>\r\n        </tr>\r\n      </table>\r\n    </fieldset>\r\n  `,\r\n  providers: [NGB_TIMEPICKER_VALUE_ACCESSOR]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgbTimepickerConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'meridian': [{ type: Input },],\n'spinners': [{ type: Input },],\n'seconds': [{ type: Input },],\n'hourStep': [{ type: Input },],\n'minuteStep': [{ type: Input },],\n'secondStep': [{ type: Input },],\n'readonlyInputs': [{ type: Input },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}