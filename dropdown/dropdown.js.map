{"version":3,"file":"dropdown.js","sourceRoot":"","sources":["../../src/dropdown/dropdown.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, Input, Output, EventEmitter, ElementRef} from '@angular/core';\r\nimport {NgbDropdownConfig} from './dropdown-config';\r\n\r\n/**\r\n * Transforms a node into a dropdown.\r\n */\r\n\r\nexport class NgbDropdown {\r\n  private _toggleElement: any;\r\n\r\n  /**\r\n   * Indicates that the dropdown should open upwards\r\n   */\r\n   up: boolean;\r\n\r\n  /**\r\n   * Indicates that dropdown should be closed when selecting one of dropdown items (click) or pressing ESC.\r\n   */\r\n   autoClose: boolean;\r\n\r\n  /**\r\n   *  Defines whether or not the dropdown-menu is open initially.\r\n   */\r\n   _open = false;\r\n\r\n  /**\r\n   *  An event fired when the dropdown is opened or closed.\r\n   *  Event's payload equals whether dropdown is open.\r\n   */\r\n   openChange = new EventEmitter();\r\n\r\n  constructor(config: NgbDropdownConfig) {\r\n    this.up = config.up;\r\n    this.autoClose = config.autoClose;\r\n  }\r\n\r\n\r\n  /**\r\n   * Checks if the dropdown menu is open or not.\r\n   */\r\n  isOpen(): boolean { return this._open; }\r\n\r\n  /**\r\n   * Opens the dropdown menu of a given navbar or tabbed navigation.\r\n   */\r\n  open(): void {\r\n    if (!this._open) {\r\n      this._open = true;\r\n      this.openChange.emit(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes the dropdown menu of a given navbar or tabbed navigation.\r\n   */\r\n  close(): void {\r\n    if (this._open) {\r\n      this._open = false;\r\n      this.openChange.emit(false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles the dropdown menu of a given navbar or tabbed navigation.\r\n   */\r\n  toggle(): void {\r\n    if (this.isOpen()) {\r\n      this.close();\r\n    } else {\r\n      this.open();\r\n    }\r\n  }\r\n\r\n  closeFromOutsideClick($event) {\r\n    if (this.autoClose && !this._isEventFromToggle($event)) {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  closeFromOutsideEsc() {\r\n    if (this.autoClose) {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  set toggleElement(toggleElement: any) { this._toggleElement = toggleElement; }\r\n\r\n  private _isEventFromToggle($event) { return !!this._toggleElement && this._toggleElement.contains($event.target); }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[ngbDropdown]',\r\n  exportAs: 'ngbDropdown',\r\n  host: {\r\n    '[class.dropdown]': '!up',\r\n    '[class.dropup]': 'up',\r\n    '[class.open]': 'isOpen()',\r\n    '(keyup.esc)': 'closeFromOutsideEsc()',\r\n    '(document:click)': 'closeFromOutsideClick($event)'\r\n  }\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgbDropdownConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'up': [{ type: Input },],\n'autoClose': [{ type: Input },],\n'_open': [{ type: Input, args: ['open', ] },],\n'openChange': [{ type: Output },],\n};\n}\r\n\r\n/**\r\n * Allows the dropdown to be toggled via click. This directive is optional.\r\n */\r\n\r\nexport class NgbDropdownToggle {\r\n  constructor(public dropdown: NgbDropdown, elementRef: ElementRef) {\r\n    dropdown.toggleElement = elementRef.nativeElement;\r\n  }\r\n\r\n  toggleOpen() { this.dropdown.toggle(); }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[ngbDropdownToggle]',\r\n  host: {\r\n    'class': 'dropdown-toggle',\r\n    'aria-haspopup': 'true',\r\n    '[attr.aria-expanded]': 'dropdown.isOpen()',\r\n    '(click)': 'toggleOpen()'\r\n  }\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgbDropdown, },\n{type: ElementRef, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}