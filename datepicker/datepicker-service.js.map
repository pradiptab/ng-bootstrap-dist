{"version":3,"file":"datepicker-service.js","sourceRoot":"","sources":["../../src/datepicker/datepicker-service.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgbCalendar} from './ngb-calendar';\r\nimport {NgbDate} from './ngb-date';\r\nimport {MonthViewModel, DayViewModel} from './datepicker-view-model';\r\nimport {Injectable} from '@angular/core';\r\n\r\n\r\nexport class NgbDatepickerService {\r\n  constructor(private _calendar: NgbCalendar) {}\r\n\r\n  generateMonthViewModel(\r\n      date: NgbDate, minDate: NgbDate, maxDate: NgbDate, firstDayOfWeek: number,\r\n      markDisabled: (date: NgbDate, current: {month: number, year: number}) => boolean): MonthViewModel {\r\n    const month: MonthViewModel = {firstDate: null, number: date.month, year: date.year, weeks: [], weekdays: []};\r\n\r\n    date = this._getFirstViewDate(date, firstDayOfWeek);\r\n\r\n    // month has weeks\r\n    for (let w = 0; w < this._calendar.getWeeksPerMonth(); w++) {\r\n      const days: DayViewModel[] = [];\r\n\r\n      // week has days\r\n      for (let d = 0; d < this._calendar.getDaysPerWeek(); d++) {\r\n        if (w === 0) {\r\n          month.weekdays.push(this._calendar.getWeekday(date));\r\n        }\r\n\r\n        const newDate = new NgbDate(date.year, date.month, date.day);\r\n\r\n        let disabled = (minDate && newDate.before(minDate)) || (maxDate && newDate.after(maxDate));\r\n        if (!disabled && markDisabled) {\r\n          disabled = markDisabled(newDate, {month: month.number, year: month.year});\r\n        }\r\n\r\n        // saving first date of the month\r\n        if (month.firstDate === null && date.month === month.number) {\r\n          month.firstDate = newDate;\r\n        }\r\n\r\n        days.push({date: newDate, disabled: disabled});\r\n\r\n        date = this._calendar.getNext(date);\r\n      }\r\n\r\n      month.weeks.push(\r\n          {number: this._calendar.getWeekNumber(days.map(day => NgbDate.from(day.date)), firstDayOfWeek), days: days});\r\n    }\r\n\r\n    return month;\r\n  }\r\n\r\n  toValidDate(date: {year: number, month: number, day?: number}, defaultValue?: NgbDate): NgbDate {\r\n    const ngbDate = NgbDate.from(date);\r\n    if (defaultValue === undefined) {\r\n      defaultValue = this._calendar.getToday();\r\n    }\r\n    return this._calendar.isValid(ngbDate) ? ngbDate : defaultValue;\r\n  }\r\n\r\n  private _getFirstViewDate(date: NgbDate, firstDayOfWeek: number): NgbDate {\r\n    const currentMonth = date.month;\r\n    let today = new NgbDate(date.year, date.month, date.day);\r\n    let yesterday = this._calendar.getPrev(today);\r\n\r\n    const firstDayOfCurrentMonthIsAlsoFirstDayOfWeek =\r\n        () => { return today.month !== yesterday.month && firstDayOfWeek === this._calendar.getWeekday(today); };\r\n\r\n    const reachedTheFirstDayOfTheLastWeekOfPreviousMonth =\r\n        () => { return today.month !== currentMonth && firstDayOfWeek === this._calendar.getWeekday(today); };\r\n\r\n    // going back in time\r\n    while (!reachedTheFirstDayOfTheLastWeekOfPreviousMonth() && !firstDayOfCurrentMonthIsAlsoFirstDayOfWeek()) {\r\n      today = new NgbDate(yesterday.year, yesterday.month, yesterday.day);\r\n      yesterday = this._calendar.getPrev(yesterday);\r\n    }\r\n\r\n    return today;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgbCalendar, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}