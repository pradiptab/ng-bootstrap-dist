{"version":3,"file":"datepicker-input.js","sourceRoot":"","sources":["../../src/datepicker/datepicker-input.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Directive,\r\n  Input,\r\n  ComponentRef,\r\n  ElementRef,\r\n  ViewContainerRef,\r\n  Renderer,\r\n  ComponentFactoryResolver,\r\n  NgZone,\r\n  TemplateRef,\r\n  forwardRef,\r\n  EventEmitter,\r\n  Output\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\n\r\nimport {NgbDate} from './ngb-date';\r\nimport {NgbDatepicker, NgbDatepickerNavigateEvent} from './datepicker';\r\nimport {DayTemplateContext} from './datepicker-day-template-context';\r\nimport {NgbDateParserFormatter} from './ngb-date-parser-formatter';\r\n\r\nimport {positionElements} from '../util/positioning';\r\nimport {NgbDateStruct} from './ngb-date-struct';\r\nimport {NgbDatepickerService} from './datepicker-service';\r\n\r\nconst NGB_DATEPICKER_VALUE_ACCESSOR = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => NgbInputDatepicker),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * A directive that makes it possible to have datepickers on input fields.\r\n * Manages integration with the input field itself (data entry) and ngModel (validation etc.).\r\n */\r\n\r\nexport class NgbInputDatepicker implements ControlValueAccessor {\r\n  private _cRef: ComponentRef<NgbDatepicker> = null;\r\n  private _model: NgbDate;\r\n  private _zoneSubscription: any;\r\n\r\n  /**\r\n   * Reference for the custom template for the day display\r\n   */\r\n   dayTemplate: TemplateRef<DayTemplateContext>;\r\n\r\n  /**\r\n   * Number of months to display\r\n   */\r\n   displayMonths: number;\r\n\r\n  /**\r\n  * First day of the week. With default calendar we use ISO 8601: 1=Mon ... 7=Sun\r\n   */\r\n   firstDayOfWeek: number;\r\n\r\n  /**\r\n   * Callback to mark a given date as disabled.\r\n   * 'Current' contains the month that will be displayed in the view\r\n   */\r\n   markDisabled: (date: NgbDateStruct, current: {year: number, month: number}) => boolean;\r\n\r\n  /**\r\n   * Min date for the navigation. If not provided will be 10 years before today or `startDate`\r\n   */\r\n   minDate: NgbDateStruct;\r\n\r\n  /**\r\n   * Max date for the navigation. If not provided will be 10 years from today or `startDate`\r\n   */\r\n   maxDate: NgbDateStruct;\r\n\r\n  /**\r\n   * Navigation type: `select` (default with select boxes for month and year), `arrows`\r\n   * (without select boxes, only navigation arrows) or `none` (no navigation at all)\r\n   */\r\n   navigation: 'select' | 'arrows' | 'none';\r\n\r\n  /**\r\n   * The way to display days that don't belong to current month: `visible` (default),\r\n   * `hidden` (not displayed) or `collapsed` (not displayed with empty space collapsed)\r\n   */\r\n   outsideDays: 'visible' | 'collapsed' | 'hidden';\r\n\r\n  /**\r\n   * Whether to display days of the week\r\n   */\r\n   showWeekdays: boolean;\r\n\r\n  /**\r\n   * Whether to display week numbers\r\n   */\r\n   showWeekNumbers: boolean;\r\n\r\n  /**\r\n   * Date to open calendar with.\r\n   * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n   * If nothing or invalid date provided, calendar will open with current month.\r\n   * Use 'navigateTo(date)' as an alternative\r\n   */\r\n   startDate: {year: number, month: number};\r\n\r\n  /**\r\n   * An event fired when navigation happens and currently displayed month changes.\r\n   * See NgbDatepickerNavigateEvent for the payload info.\r\n   */\r\n   navigate = new EventEmitter<NgbDatepickerNavigateEvent>();\r\n\r\n  private _onChange = (_: any) => {};\r\n  private _onTouched = () => {};\r\n\r\n\r\n  constructor(\r\n      private _parserFormatter: NgbDateParserFormatter, private _elRef: ElementRef, private _vcRef: ViewContainerRef,\r\n      private _renderer: Renderer, private _cfr: ComponentFactoryResolver, ngZone: NgZone,\r\n      private _service: NgbDatepickerService) {\r\n    this._zoneSubscription = ngZone.onStable.subscribe(() => {\r\n      if (this._cRef) {\r\n        positionElements(this._elRef.nativeElement, this._cRef.location.nativeElement, 'bottom-left');\r\n      }\r\n    });\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => any): void { this._onChange = fn; }\r\n\r\n  registerOnTouched(fn: () => any): void { this._onTouched = fn; }\r\n\r\n  writeValue(value) {\r\n    this._model =\r\n        value ? this._service.toValidDate({year: value.year, month: value.month, day: value.day}, null) : null;\r\n    this._writeModelValue(this._model);\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this._renderer.setElementProperty(this._elRef.nativeElement, 'disabled', isDisabled);\r\n    if (this.isOpen()) {\r\n      this._cRef.instance.setDisabledState(isDisabled);\r\n    }\r\n  }\r\n\r\n  manualDateChange(value: string) {\r\n    this._model = this._service.toValidDate(this._parserFormatter.parse(value), null);\r\n    this._onChange(this._model ? {year: this._model.year, month: this._model.month, day: this._model.day} : null);\r\n    this._writeModelValue(this._model);\r\n  }\r\n\r\n  isOpen() { return !!this._cRef; }\r\n\r\n  /**\r\n   * Opens the datepicker with the selected date indicated by the ngModel value.\r\n   */\r\n  open() {\r\n    if (!this.isOpen()) {\r\n      const cf = this._cfr.resolveComponentFactory(NgbDatepicker);\r\n      this._cRef = this._vcRef.createComponent(cf);\r\n\r\n      this._applyPopupStyling(this._cRef.location.nativeElement);\r\n      this._cRef.instance.writeValue(this._model);\r\n      this._applyDatepickerInputs(this._cRef.instance);\r\n      this._subscribeForDatepickerOutputs(this._cRef.instance);\r\n      this._cRef.instance.ngOnInit();\r\n\r\n      // date selection event handling\r\n      this._cRef.instance.registerOnChange((selectedDate) => {\r\n        this.writeValue(selectedDate);\r\n        this._onChange(selectedDate);\r\n        this.close();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes the datepicker popup.\r\n   */\r\n  close() {\r\n    if (this.isOpen()) {\r\n      this._vcRef.remove(this._vcRef.indexOf(this._cRef.hostView));\r\n      this._cRef = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles the datepicker popup (opens when closed and closes when opened).\r\n   */\r\n  toggle() {\r\n    if (this.isOpen()) {\r\n      this.close();\r\n    } else {\r\n      this.open();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Navigates current view to provided date.\r\n   * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.\r\n   * If nothing or invalid date provided calendar will open current month.\r\n   * Use 'startDate' input as an alternative\r\n   */\r\n  navigateTo(date?: {year: number, month: number}) {\r\n    if (this.isOpen()) {\r\n      this._cRef.instance.navigateTo(date);\r\n    }\r\n  }\r\n\r\n  onBlur() { this._onTouched(); }\r\n\r\n  private _applyDatepickerInputs(datepickerInstance: NgbDatepicker): void {\r\n    ['dayTemplate', 'displayMonths', 'firstDayOfWeek', 'markDisabled', 'minDate', 'maxDate', 'navigation',\r\n     'outsideDays', 'showNavigation', 'showWeekdays', 'showWeekNumbers']\r\n        .forEach((optionName: string) => {\r\n          if (this[optionName] !== undefined) {\r\n            datepickerInstance[optionName] = this[optionName];\r\n          }\r\n        });\r\n    datepickerInstance.startDate = this.startDate || this._model;\r\n  }\r\n\r\n  private _applyPopupStyling(nativeElement: any) {\r\n    this._renderer.setElementClass(nativeElement, 'dropdown-menu', true);\r\n    this._renderer.setElementStyle(nativeElement, 'display', 'block');\r\n    this._renderer.setElementStyle(nativeElement, 'padding', '0.40rem');\r\n  }\r\n\r\n  private _subscribeForDatepickerOutputs(datepickerInstance: NgbDatepicker) {\r\n    datepickerInstance.navigate.subscribe(date => this.navigate.emit(date));\r\n  }\r\n\r\n  private _writeModelValue(model: NgbDate) {\r\n    this._renderer.setElementProperty(this._elRef.nativeElement, 'value', this._parserFormatter.format(model));\r\n    if (this.isOpen()) {\r\n      this._cRef.instance.writeValue(model);\r\n      this._onTouched();\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'input[ngbDatepicker]',\r\n  exportAs: 'ngbDatepicker',\r\n  host: {'(change)': 'manualDateChange($event.target.value)', '(keyup.esc)': 'close()', '(blur)': 'onBlur()'},\r\n  providers: [NGB_DATEPICKER_VALUE_ACCESSOR]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgbDateParserFormatter, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: Renderer, },\n{type: ComponentFactoryResolver, },\n{type: NgZone, },\n{type: NgbDatepickerService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dayTemplate': [{ type: Input },],\n'displayMonths': [{ type: Input },],\n'firstDayOfWeek': [{ type: Input },],\n'markDisabled': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'navigation': [{ type: Input },],\n'outsideDays': [{ type: Input },],\n'showWeekdays': [{ type: Input },],\n'showWeekNumbers': [{ type: Input },],\n'startDate': [{ type: Input },],\n'navigate': [{ type: Output },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}