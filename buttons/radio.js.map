{"version":3,"file":"radio.js","sourceRoot":"","sources":["../../src/buttons/radio.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, forwardRef, Optional, Input, Renderer, ElementRef, OnDestroy} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\n\r\nconst NGB_RADIO_VALUE_ACCESSOR = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => NgbRadioGroup),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Easily create Bootstrap-style radio buttons. A value of a selected button is bound to a variable\r\n * specified via ngModel.\r\n */\r\n\r\nexport class NgbRadioGroup implements ControlValueAccessor {\r\n  private _radios: Set<NgbRadio> = new Set<NgbRadio>();\r\n  private _value = null;\r\n  private _disabled: boolean;\r\n\r\n  get disabled() { return this._disabled; }\r\n  set disabled(isDisabled: boolean) { this.setDisabledState(isDisabled); }\r\n\r\n  onChange = (_: any) => {};\r\n  onTouched = () => {};\r\n\r\n  onRadioChange(radio: NgbRadio) {\r\n    this.writeValue(radio.value);\r\n    this.onChange(radio.value);\r\n  }\r\n\r\n  onRadioValueUpdate() { this._updateRadiosValue(); }\r\n\r\n  register(radio: NgbRadio) { this._radios.add(radio); }\r\n\r\n  registerOnChange(fn: (value: any) => any): void { this.onChange = fn; }\r\n\r\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this._disabled = isDisabled;\r\n    this._updateRadiosDisabled();\r\n  }\r\n\r\n  unregister(radio: NgbRadio) { this._radios.delete(radio); }\r\n\r\n  writeValue(value) {\r\n    this._value = value;\r\n    this._updateRadiosValue();\r\n  }\r\n\r\n  private _updateRadiosValue() { this._radios.forEach((radio) => radio.updateValue(this._value)); }\r\n  private _updateRadiosDisabled() { this._radios.forEach((radio) => radio.updateDisabled()); }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[ngbRadioGroup]',\r\n  host: {'data-toggle': 'buttons', 'class': 'btn-group'},\r\n  providers: [NGB_RADIO_VALUE_ACCESSOR]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\r\n\r\n\r\n\r\nexport class NgbActiveLabel {\r\n  constructor(private _renderer: Renderer, private _elRef: ElementRef) {}\r\n\r\n  set active(isActive: boolean) { this._renderer.setElementClass(this._elRef.nativeElement, 'active', isActive); }\r\n  set disabled(isDisabled: boolean) {\r\n    this._renderer.setElementClass(this._elRef.nativeElement, 'disabled', isDisabled);\r\n  }\r\n  set focused(isFocused: boolean) { this._renderer.setElementClass(this._elRef.nativeElement, 'focus', isFocused); }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'label.btn'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Renderer, },\n{type: ElementRef, },\n];\n}\r\n\r\n\r\n/**\r\n * Marks an input of type \"radio\" as part of the NgbRadioGroup.\r\n */\r\n\r\nexport class NgbRadio implements OnDestroy {\r\n  private _checked: boolean;\r\n  private _disabled: boolean;\r\n  private _value: any = null;\r\n\r\n  /**\r\n   * You can specify model value of a given radio by binding to the value property.\r\n  */\r\n  \r\n  set value(value: any) {\r\n    this._value = value;\r\n    const stringValue = value ? value.toString() : '';\r\n    this._renderer.setElementProperty(this._element.nativeElement, 'value', stringValue);\r\n\r\n    if (this._group) {\r\n      this._group.onRadioValueUpdate();\r\n    }\r\n  }\r\n\r\n  \r\n  set checked(value: any) {\r\n    this._checked = this._element.nativeElement.hasAttribute('checked') ? true : value;\r\n  }\r\n\r\n  \r\n  set disabled(isDisabled: any) {\r\n    this._disabled = isDisabled !== false;\r\n    this.updateDisabled();\r\n  }\r\n\r\n  set focused(isFocused: boolean) {\r\n    if (this._label) {\r\n      this._label.focused = isFocused;\r\n    }\r\n  }\r\n\r\n  get value() { return this._value; }\r\n\r\n  get checked() { return this._checked; }\r\n\r\n  get disabled() { return (this._group && this._group.disabled) || this._disabled; }\r\n\r\n  constructor(\r\n       private _group: NgbRadioGroup,  private _label: NgbActiveLabel,\r\n      private _renderer: Renderer, private _element: ElementRef) {\r\n    if (this._group) {\r\n      this._group.register(this);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._group) {\r\n      this._group.unregister(this);\r\n    }\r\n  }\r\n\r\n  onChange() {\r\n    if (this._group) {\r\n      this._group.onRadioChange(this);\r\n    }\r\n  }\r\n\r\n  updateValue(value) {\r\n    this._checked = (this.value === value && value !== null);\r\n    this._label.active = this._checked;\r\n  }\r\n\r\n  updateDisabled() {\r\n    let disabled = (this._group && this._group.disabled) || this._disabled;\r\n    if (this._label) {\r\n      this._label.disabled = disabled;\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: 'input[type=radio]',\r\n  host: {\r\n    '[checked]': 'checked',\r\n    '[disabled]': 'disabled',\r\n    '(change)': 'onChange()',\r\n    '(focus)': 'focused = true',\r\n    '(blur)': 'focused = false'\r\n  }\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgbRadioGroup, decorators: [{ type: Optional }, ]},\n{type: NgbActiveLabel, decorators: [{ type: Optional }, ]},\n{type: Renderer, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input, args: ['value', ] },],\n'checked': [{ type: Input, args: ['checked', ] },],\n'disabled': [{ type: Input, args: ['disabled', ] },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}