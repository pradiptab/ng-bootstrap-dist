{"version":3,"file":"accordion.js","sourceRoot":"","sources":["../../src/accordion/accordion.ts"],"names":[],"mappings":"OAAO,EAEL,SAAS,EACT,YAAY,EACZ,eAAe,EACf,SAAS,EACT,YAAY,EACZ,KAAK,EACL,MAAM,EAEN,WAAW,EACZ,MAAM,eAAe;OAEf,EAAC,QAAQ,EAAC,MAAM,cAAc;OAE9B,EAAC,kBAAkB,EAAC,MAAM,oBAAoB;AAErD,IAAI,MAAM,GAAG,CAAC,CAAC;AAEf;;GAEG;AAEH;IACE,uBAAmB,WAA6B;QAA7B,gBAAW,GAAX,WAAW,CAAkB;IAAG,CAAC;IAC/C,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,yBAAyB,EAAC,EAAG,EAAE;KACnE,CAAC;IACF,kBAAkB;IACX,4BAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,WAAW,GAAG;KACpB,CAAC;IACF,oBAAC;AAAD,CAAC,AATD,IASC;AAED;;GAEG;AAEH;IACE,yBAAmB,WAA6B;QAA7B,gBAAW,GAAX,WAAW,CAAkB;IAAG,CAAC;IAC/C,0BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,2BAA2B,EAAC,EAAG,EAAE;KACrE,CAAC;IACF,kBAAkB;IACX,8BAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,WAAW,GAAG;KACpB,CAAC;IACF,sBAAC;AAAD,CAAC,AATD,IASC;AAED;;;GAGG;AAEH;IAAA;QACE;;WAEG;QACH,YAAO,GAAY,KAAK,CAAC;QAEzB;;;WAGG;QACF,aAAQ,GAAG,KAAK,CAAC;QAElB;;;WAGG;QACF,OAAE,GAAG,eAAa,MAAM,EAAI,CAAC;IA6BhC,CAAC;IAdM,mBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,WAAW,EAAC,EAAG,EAAE;KACrD,CAAC;IACF,kBAAkB;IACX,uBAAc,GAA6D,EACjF,CAAC;IACK,uBAAc,GAA2C;QAChE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC9B,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACxB,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC3B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,eAAe,EAAG,EAAE,EAAE;QAClE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,aAAa,EAAG,EAAE,EAAE;KAC7D,CAAC;IACF,eAAC;AAAD,CAAC,AA7CD,IA6CC;AAsBD;;;GAGG;AAEH;IAkCE,sBAAY,MAA0B;QAjCtC;;WAEG;QACK,YAAO,GAAyB,IAAI,GAAG,EAAmB,CAAC;QAEnE;;WAEG;QACK,eAAU,GAA0B,IAAI,GAAG,EAAoB,CAAC;QAIxE;;WAEG;QACF,cAAS,GAAsB,EAAE,CAAC;QAanC;;WAEG;QACF,gBAAW,GAAG,IAAI,YAAY,EAAuB,CAAC;QAGrD,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,WAAW,CAAC;IAC7C,CAAC;IAED;;OAEG;IACH,6BAAM,GAAN,UAAO,OAAe;QACpB,IAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAE3C,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7B,IAAM,SAAS,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC7C,IAAI,kBAAgB,GAAG,KAAK,CAAC;YAE7B,IAAI,CAAC,WAAW,CAAC,IAAI,CACjB,EAAC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,cAAc,EAAE,cAAQ,kBAAgB,GAAG,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;YAElG,EAAE,CAAC,CAAC,CAAC,kBAAgB,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;gBAErC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBAC1B,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;gBAC7B,CAAC;gBACD,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC1B,CAAC;QACH,CAAC;IACH,CAAC;IAED,4CAAqB,GAArB;QACE,oBAAoB;QACpB,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,SAAS,GAAI,IAAI,CAAC,SAAoB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC/D,CAAC;QACD,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,sBAAsB;QACtB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC;IACH,CAAC;IAED;;OAEG;IACH,6BAAM,GAAN,UAAO,OAAe,IAAa,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAE9D,mCAAY,GAApB,UAAqB,OAAe;QAApC,iBAMC;QALC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,EAAE;YAC7B,EAAE,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC,CAAC;gBACnB,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,uCAAgB,GAAxB;QAAA,iBAGC;QAFC,IAAI,CAAC,SAAS;YACV,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAxC,CAAwC,CAAC,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,EAAE,EAAR,CAAQ,CAAC,CAAC;IAC7G,CAAC;IAEO,oCAAa,GAArB;QAAA,iBAOC;QANC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACrB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QACxB,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,UAAC,KAAK;YAClC,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACrF,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC;IACI,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,eAAe;oBACzB,QAAQ,EAAE,cAAc;oBACxB,IAAI,EAAE,EAAC,MAAM,EAAE,SAAS,EAAE,6BAA6B,EAAE,mBAAmB,EAAC;oBAC7E,QAAQ,EAAE,87BAgBX;iBACA,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,2BAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,kBAAkB,GAAG;KAC3B,CAAC;IACK,2BAAc,GAA2C;QAChE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAG,EAAE,EAAE;QAC1D,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC/B,kBAAkB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,aAAa,EAAG,EAAE,EAAE;QAC/D,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;KACjC,CAAC;IACF,mBAAC;AAAD,CAAC,AA1ID,IA0IC","sourcesContent":["import {\r\n  AfterContentChecked,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  TemplateRef\r\n} from '@angular/core';\r\n\r\nimport {isString} from '../util/util';\r\n\r\nimport {NgbAccordionConfig} from './accordion-config';\r\n\r\nlet nextId = 0;\r\n\r\n/**\r\n * This directive should be used to wrap accordion panel titles that need to contain HTML markup or other directives.\r\n */\r\n\r\nexport class NgbPanelTitle {\r\n  constructor(public templateRef: TemplateRef<any>) {}\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'template[ngbPanelTitle]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: TemplateRef, },\n];\n}\r\n\r\n/**\r\n * This directive must be used to wrap accordion panel content.\r\n */\r\n\r\nexport class NgbPanelContent {\r\n  constructor(public templateRef: TemplateRef<any>) {}\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'template[ngbPanelContent]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: TemplateRef, },\n];\n}\r\n\r\n/**\r\n * The NgbPanel directive represents an in individual panel with the title and collapsible\r\n * content\r\n */\r\n\r\nexport class NgbPanel {\r\n  /**\r\n   * Defines if the tab control is focused\r\n   */\r\n  focused: boolean = false;\r\n\r\n  /**\r\n   *  A flag determining whether the panel is disabled or not.\r\n   *  When disabled, the panel cannot be toggled.\r\n   */\r\n   disabled = false;\r\n\r\n  /**\r\n   *  An optional id for the panel. The id should be unique.\r\n   *  If not provided, it will be auto-generated.\r\n   */\r\n   id = `ngb-panel-${nextId++}`;\r\n\r\n  /**\r\n   *  The title for the panel.\r\n   */\r\n   title: string;\r\n\r\n  /**\r\n   *  Accordion's types of panels to be applied per panel basis.\r\n   *  Bootstrap 4 recognizes the following types: \"success\", \"info\", \"warning\" and \"danger\".\r\n   */\r\n   type: string;\r\n\r\n   contentTpl: NgbPanelContent;\r\n   titleTpl: NgbPanelTitle;\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'ngb-panel'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'title': [{ type: Input },],\n'type': [{ type: Input },],\n'contentTpl': [{ type: ContentChild, args: [NgbPanelContent, ] },],\n'titleTpl': [{ type: ContentChild, args: [NgbPanelTitle, ] },],\n};\n}\r\n\r\n/**\r\n * The payload of the change event fired right before toggling an accordion panel\r\n */\r\nexport interface NgbPanelChangeEvent {\r\n  /**\r\n   * Id of the accordion panel that is toggled\r\n   */\r\n  panelId: string;\r\n\r\n  /**\r\n   * Whether the panel will be opened (true) or closed (false)\r\n   */\r\n  nextState: boolean;\r\n\r\n  /**\r\n   * Function that will prevent panel toggling if called\r\n   */\r\n  preventDefault: () => void;\r\n}\r\n\r\n/**\r\n * The NgbAccordion directive is a collection of panels.\r\n * It can assure that only panel can be opened at a time.\r\n */\r\n\r\nexport class NgbAccordion implements AfterContentChecked {\r\n  /**\r\n   * A map that stores each panel state\r\n   */\r\n  private _states: Map<string, boolean> = new Map<string, boolean>();\r\n\r\n  /**\r\n   * A map that stores references to all panels\r\n   */\r\n  private _panelRefs: Map<string, NgbPanel> = new Map<string, NgbPanel>();\r\n\r\n   panels: QueryList<NgbPanel>;\r\n\r\n  /**\r\n   * An array or comma separated strings of panel identifiers that should be opened\r\n   */\r\n   activeIds: string | string[] = [];\r\n\r\n  /**\r\n   *  Whether the other panels should be closed when a panel is opened\r\n   */\r\n   closeOtherPanels: boolean;\r\n\r\n  /**\r\n   *  Accordion's types of panels to be applied globally.\r\n   *  Bootstrap 4 recognizes the following types: \"success\", \"info\", \"warning\" and \"danger\".\r\n   */\r\n   type: string;\r\n\r\n  /**\r\n   * A panel change event fired right before the panel toggle happens. See NgbPanelChangeEvent for payload details\r\n   */\r\n   panelChange = new EventEmitter<NgbPanelChangeEvent>();\r\n\r\n  constructor(config: NgbAccordionConfig) {\r\n    this.type = config.type;\r\n    this.closeOtherPanels = config.closeOthers;\r\n  }\r\n\r\n  /**\r\n   * Programmatically toggle a panel with a given id.\r\n   */\r\n  toggle(panelId: string) {\r\n    const panel = this._panelRefs.get(panelId);\r\n\r\n    if (panel && !panel.disabled) {\r\n      const nextState = !this._states.get(panelId);\r\n      let defaultPrevented = false;\r\n\r\n      this.panelChange.emit(\r\n          {panelId: panelId, nextState: nextState, preventDefault: () => { defaultPrevented = true; }});\r\n\r\n      if (!defaultPrevented) {\r\n        this._states.set(panelId, nextState);\r\n\r\n        if (this.closeOtherPanels) {\r\n          this._closeOthers(panelId);\r\n        }\r\n        this._updateActiveIds();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    // active id updates\r\n    if (isString(this.activeIds)) {\r\n      this.activeIds = (this.activeIds as string).split(/\\s*,\\s*/);\r\n    }\r\n    this._updateStates();\r\n\r\n    // closeOthers updates\r\n    if (this.activeIds.length > 1 && this.closeOtherPanels) {\r\n      this._closeOthers(this.activeIds[0]);\r\n      this._updateActiveIds();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  isOpen(panelId: string): boolean { return this._states.get(panelId); }\r\n\r\n  private _closeOthers(panelId: string) {\r\n    this._states.forEach((state, id) => {\r\n      if (id !== panelId) {\r\n        this._states.set(id, false);\r\n      }\r\n    });\r\n  }\r\n\r\n  private _updateActiveIds() {\r\n    this.activeIds =\r\n        this.panels.toArray().filter(panel => this.isOpen(panel.id) && !panel.disabled).map(panel => panel.id);\r\n  }\r\n\r\n  private _updateStates() {\r\n    this._states.clear();\r\n    this._panelRefs.clear();\r\n    this.panels.toArray().forEach((panel) => {\r\n      this._states.set(panel.id, this.activeIds.indexOf(panel.id) > -1 && !panel.disabled);\r\n      this._panelRefs.set(panel.id, panel);\r\n    });\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'ngb-accordion',\r\n  exportAs: 'ngbAccordion',\r\n  host: {'role': 'tablist', '[attr.aria-multiselectable]': '!closeOtherPanels'},\r\n  template: `\r\n  <div class=\"card\">\r\n    <template ngFor let-panel [ngForOf]=\"panels\">\r\n      <div role=\"tab\" id=\"{{panel.id}}-header\" [attr.aria-selected]=\"panel.focused\"\r\n        [class]=\"'card-header ' + (panel.type ? 'card-'+panel.type: type ? 'card-'+type : '')\" [class.active]=\"isOpen(panel.id)\">\r\n        <a href (click)=\"!!toggle(panel.id)\" (focus)=\"panel.focused = true\" \r\n          (blur)=\"panel.focused = false\" [class.text-muted]=\"panel.disabled\" \r\n          [attr.aria-expanded]=\"isOpen(panel.id)\" [attr.aria-controls]=\"panel.id\">\r\n          {{panel.title}}<template [ngTemplateOutlet]=\"panel.titleTpl?.templateRef\"></template>\r\n        </a>\r\n      </div>\r\n      <div id=\"{{panel.id}}\" role=\"tabpanel\" [attr.aria-labelledby]=\"panel.id + '-header'\" class=\"card-block\" *ngIf=\"isOpen(panel.id)\">\r\n        <template [ngTemplateOutlet]=\"panel.contentTpl.templateRef\"></template>\r\n      </div>\r\n    </template>\r\n  </div>\r\n`\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgbAccordionConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'panels': [{ type: ContentChildren, args: [NgbPanel, ] },],\n'activeIds': [{ type: Input },],\n'closeOtherPanels': [{ type: Input, args: ['closeOthers', ] },],\n'type': [{ type: Input },],\n'panelChange': [{ type: Output },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}