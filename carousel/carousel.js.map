{"version":3,"file":"carousel.js","sourceRoot":"","sources":["../../src/carousel/carousel.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Component,\r\n  Directive,\r\n  TemplateRef,\r\n  ContentChildren,\r\n  QueryList,\r\n  Input,\r\n  OnDestroy,\r\n  AfterContentChecked,\r\n  OnInit\r\n} from '@angular/core';\r\nimport {NgbCarouselConfig} from './carousel-config';\r\n\r\nlet nextId = 0;\r\n\r\n/**\r\n * Represents an individual slide to be used within a carousel.\r\n */\r\n\r\nexport class NgbSlide {\r\n  /**\r\n   * Unique slide identifier. Must be unique for the entire document for proper accessibility support.\r\n   * Will be auto-generated if not provided.\r\n   */\r\n   id = `ngb-slide-${nextId++}`;\r\n  constructor(public tplRef: TemplateRef<any>) {}\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'template[ngbSlide]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: TemplateRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\r\n\r\n/**\r\n * Directive to easily create carousels based on Bootstrap's markup.\r\n */\r\n\r\nexport class NgbCarousel implements AfterContentChecked,\r\n    OnDestroy, OnInit {\r\n   slides: QueryList<NgbSlide>;\r\n  private _slideChangeInterval;\r\n\r\n  /**\r\n   * Amount of time in milliseconds before next slide is shown.\r\n   */\r\n   interval: number;\r\n\r\n  /**\r\n   * Whether can wrap from the last to the first slide.\r\n   */\r\n   wrap: boolean;\r\n\r\n  /**\r\n   * A flag for allowing navigation via keyboard\r\n   */\r\n   keyboard: boolean;\r\n\r\n  /**\r\n   * The active slide id.\r\n   */\r\n   activeId: string;\r\n\r\n  constructor(config: NgbCarouselConfig) {\r\n    this.interval = config.interval;\r\n    this.wrap = config.wrap;\r\n    this.keyboard = config.keyboard;\r\n  }\r\n\r\n  ngAfterContentChecked() {\r\n    let activeSlide = this._getSlideById(this.activeId);\r\n    this.activeId = activeSlide ? activeSlide.id : (this.slides.length ? this.slides.first.id : null);\r\n  }\r\n\r\n  ngOnInit() { this._startTimer(); }\r\n\r\n  ngOnDestroy() { clearInterval(this._slideChangeInterval); }\r\n\r\n  /**\r\n   * Navigate to a slide with the specified identifier.\r\n   */\r\n  select(slideId: string) {\r\n    this.cycleToSelected(slideId);\r\n    this._restartTimer();\r\n  }\r\n\r\n  /**\r\n   * Navigate to the next slide.\r\n   */\r\n  prev() {\r\n    this.cycleToPrev();\r\n    this._restartTimer();\r\n  }\r\n\r\n  /**\r\n   * Navigate to the next slide.\r\n   */\r\n  next() {\r\n    this.cycleToNext();\r\n    this._restartTimer();\r\n  }\r\n\r\n  /**\r\n   * Stops the carousel from cycling through items.\r\n   */\r\n  pause() { this._stopTimer(); }\r\n\r\n  /**\r\n   * Restarts cycling through the carousel slides from left to right.\r\n   */\r\n  cycle() { this._startTimer(); }\r\n\r\n  cycleToNext() { this.cycleToSelected(this._getNextSlide(this.activeId)); }\r\n\r\n  cycleToPrev() { this.cycleToSelected(this._getPrevSlide(this.activeId)); }\r\n\r\n  cycleToSelected(slideIdx: string) {\r\n    let selectedSlide = this._getSlideById(slideIdx);\r\n    if (selectedSlide) {\r\n      this.activeId = selectedSlide.id;\r\n    }\r\n  }\r\n\r\n  keyPrev() {\r\n    if (this.keyboard) {\r\n      this.prev();\r\n    }\r\n  }\r\n\r\n  keyNext() {\r\n    if (this.keyboard) {\r\n      this.next();\r\n    }\r\n  }\r\n\r\n  private _restartTimer() {\r\n    this._stopTimer();\r\n    this._startTimer();\r\n  }\r\n\r\n  private _startTimer() {\r\n    if (this.interval > 0) {\r\n      this._slideChangeInterval = setInterval(() => { this.cycleToNext(); }, this.interval);\r\n    }\r\n  }\r\n\r\n  private _stopTimer() { clearInterval(this._slideChangeInterval); }\r\n\r\n  private _getSlideById(slideId: string): NgbSlide {\r\n    let slideWithId: NgbSlide[] = this.slides.filter(slide => slide.id === slideId);\r\n    return slideWithId.length ? slideWithId[0] : null;\r\n  }\r\n\r\n  private _getSlideIdxById(slideId: string): number {\r\n    return this.slides.toArray().indexOf(this._getSlideById(slideId));\r\n  }\r\n\r\n  private _getNextSlide(currentSlideId: string): string {\r\n    const slideArr = this.slides.toArray();\r\n    const currentSlideIdx = this._getSlideIdxById(currentSlideId);\r\n    const isLastSlide = currentSlideIdx === slideArr.length - 1;\r\n\r\n    return isLastSlide ? (this.wrap ? slideArr[0].id : slideArr[slideArr.length - 1].id) :\r\n                         slideArr[currentSlideIdx + 1].id;\r\n  }\r\n\r\n  private _getPrevSlide(currentSlideId: string): string {\r\n    const slideArr = this.slides.toArray();\r\n    const currentSlideIdx = this._getSlideIdxById(currentSlideId);\r\n    const isFirstSlide = currentSlideIdx === 0;\r\n\r\n    return isFirstSlide ? (this.wrap ? slideArr[slideArr.length - 1].id : slideArr[0].id) :\r\n                          slideArr[currentSlideIdx - 1].id;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'ngb-carousel',\r\n  exportAs: 'ngbCarousel',\r\n  host: {\r\n    'class': 'carousel slide',\r\n    '[style.display]': '\"block\"',\r\n    'tabIndex': '0',\r\n    '(mouseenter)': 'pause()',\r\n    '(mouseleave)': 'cycle()',\r\n    '(keydown.arrowLeft)': 'keyPrev()',\r\n    '(keydown.arrowRight)': 'keyNext()'\r\n  },\r\n  template: `\r\n    <ol class=\"carousel-indicators\">\r\n      <li *ngFor=\"let slide of slides\" [id]=\"slide.id\" [class.active]=\"slide.id === activeId\" (click)=\"cycleToSelected(slide.id)\"></li>\r\n    </ol>\r\n    <div class=\"carousel-inner\" role=\"listbox\">\r\n      <div *ngFor=\"let slide of slides\" class=\"carousel-item\" [class.active]=\"slide.id === activeId\">\r\n        <template [ngTemplateOutlet]=\"slide.tplRef\"></template>\r\n      </div>\r\n    </div>\r\n    <a class=\"left carousel-control\" role=\"button\" (click)=\"cycleToPrev()\">\r\n      <span class=\"icon-prev\" aria-hidden=\"true\"></span>\r\n      <span class=\"sr-only\">Previous</span>\r\n    </a>\r\n    <a class=\"right carousel-control\" role=\"button\" (click)=\"cycleToNext()\">\r\n      <span class=\"icon-next\" aria-hidden=\"true\"></span>\r\n      <span class=\"sr-only\">Next</span>\r\n    </a>\r\n    `\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: NgbCarouselConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'slides': [{ type: ContentChildren, args: [NgbSlide, ] },],\n'interval': [{ type: Input },],\n'wrap': [{ type: Input },],\n'keyboard': [{ type: Input },],\n'activeId': [{ type: Input },],\n};\n}\r\n\r\nexport const NGB_CAROUSEL_DIRECTIVES = [NgbCarousel, NgbSlide];\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}